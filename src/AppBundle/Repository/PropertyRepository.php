<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Property;
use Doctrine\ORM\EntityRepository;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;
use Symfony\Component\HttpFoundation\ParameterBag;

/**
 * PropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends EntityRepository
{
    public function getAffIds()
    {
        $result = $this->createQueryBuilder('p')
            ->select('p.affId')
            ->getQuery()
            ->getScalarResult();

        return array_map('current', $result);
    }

    public function getCarouselProperties()
    {
        $query = $this->createQueryBuilder('p')
            ->join('p.medias', 'm')
            ->addSelect('m.imageUrl')
            ->andWhere('m.cover = true')
            ->andWhere('p.inCarousel = true')
            ->setMaxResults(3)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getPropertiesPaginated(int $limit, int $page)
    {
        $query = $this->createQueryBuilder('p')
            ->getQuery();

        $pagerfanta = new Pagerfanta(new DoctrineORMAdapter($query));
        $pagerfanta->setMaxPerPage($limit)
            ->setCurrentPage($page)
            ->setAllowOutOfRangePages(true);

        return $pagerfanta;
    }

    public function getRelatedProperties(Property $property)
    {
        $query = $this->createQueryBuilder('p')
            ->join('p.location', 'l')
            ->join('p.propertyInside', 'pi')
            ->orWhere('l.city = :propertyCity')
            ->orWhere('pi.roomQuantity = :propertyRooms')
            ->andWhere('p.type = :propertyType')
            ->orderBy('p.createdAt', 'ASC')
            ->setParameter(':propertyCity', $property->getLocation()->getCity())
            ->setParameter(':propertyRooms', $property->getPropertyInside()->getRoomQuantity())
            ->setParameter(':propertyType', $property->getType())
            ->setMaxResults(6)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function simpleSearchProperties(ParameterBag $data, int $page)
    {
        $query = $this->createQueryBuilder('p')
            ->join('p.location', 'l');

        if (array_key_exists('location', $data->all()) && !empty($data->get('location'))) {
            $query->andWhere('l.city LIKE :city')
                ->setParameter(':city', '%'.$data->get('location').'%');
        }

        if (array_key_exists('type', $data->all()) && !empty($data->get('type'))) {
            $query->andWhere('p.type = :type');
            if ($data->get('type') === Property::PROPERTY_HOUSE) {
                $query->setParameter(':type', Property::PROPERTY_HOUSE);
            } else {
                $query->setParameter(':type', Property::PROPERTY_APARTMENT);
            }
        }

        if (array_key_exists('price', $data->all()) && !empty($data->get('price'))) {
            list($first, $second) = explode('-', $data->get('price'));
            $query->andWhere('p.netPrice BETWEEN :first AND :second')
                ->setParameter(':first', trim($first))
                ->setParameter(':second', trim($second));
        }

        $pagerfanta = new Pagerfanta(new DoctrineORMAdapter($query));
        $pagerfanta->setMaxPerPage(5)
            ->setCurrentPage($page)
            ->setAllowOutOfRangePages(true);

        return $pagerfanta;
    }
}
